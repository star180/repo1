<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="net.beeway.emer.dao.YjUsersMapper">
	<resultMap id="BaseResultMap" type="net.beeway.emer.entry.YjUsers">
		<id column="id" property="id" jdbcType="INTEGER" />
		<result column="login_name" property="loginName" jdbcType="VARCHAR" />
		<result column="name" property="name" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="mobile" property="mobile" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="sex" property="sex" jdbcType="VARCHAR" />
		<result column="job" property="job" jdbcType="VARCHAR" />
		<result column="num" property="num" jdbcType="VARCHAR" />
		<result column="user_lock" property="userLock" jdbcType="INTEGER" />
		<result column="user_status" property="userStatus" jdbcType="INTEGER" />
		<result column="administrator" property="administrator" jdbcType="INTEGER" />
		<result column="last_modify_user_id" property="lastModifyUserId" jdbcType="INTEGER" />
		<result column="last_modify_user_email" property="lastModifyUserEmail" jdbcType="VARCHAR" />
		<result column="create_user_id" property="createUserId" jdbcType="INTEGER" />
		<result column="create_datetime" property="createDatetime" jdbcType="TIMESTAMP" />
		<result column="last_modify_datetime" property="lastModifyDatetime" jdbcType="TIMESTAMP" />
		<result column="last_login_datetime" property="lastLoginDatetime" jdbcType="TIMESTAMP" />
	</resultMap>
	<sql id="Example_Where_Clause">
		<where>
			<foreach collection="oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Update_By_Example_Where_Clause">
		<where>
			<foreach collection="example.oredCriteria" item="criteria" separator="or">
				<if test="criteria.valid">
					<trim prefix="(" suffix=")" prefixOverrides="and">
						<foreach collection="criteria.criteria" item="criterion">
							<choose>
								<when test="criterion.noValue">
									and ${criterion.condition}
								</when>
								<when test="criterion.singleValue">
									and ${criterion.condition} #{criterion.value}
								</when>
								<when test="criterion.betweenValue">
									and ${criterion.condition} #{criterion.value}
									and
									#{criterion.secondValue}
								</when>
								<when test="criterion.listValue">
									and ${criterion.condition}
									<foreach collection="criterion.value" item="listItem" open="(" close=")" separator=",">
										#{listItem}
									</foreach>
								</when>
							</choose>
						</foreach>
					</trim>
				</if>
			</foreach>
		</where>
	</sql>
	<sql id="Base_Column_List">
		id, login_name, name, password, mobile, email, sex, job,
		num, user_lock,
		user_status,
		administrator, last_modify_user_id,
		last_modify_user_email, create_user_id,
		create_datetime,
		last_modify_datetime, last_login_datetime
	</sql>
	<select id="selectAll" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from yj_users
	</select>
	<select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		from yj_users
		where id = #{id,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		yj_users
		where id = #{id,jdbcType=INTEGER}
	</delete>
	<insert id="insert" useGeneratedKeys="true" keyColumn="id" keyProperty="id" parameterType="net.beeway.emer.entry.YjUsers">
		insert into yj_users (id, login_name, name,
		password, mobile, email,
		sex, job, num, user_lock,
		user_status, administrator,
		last_modify_user_id,
		last_modify_user_email, create_user_id,
		create_datetime,
		last_modify_datetime, last_login_datetime
		)
		values
		(#{id,jdbcType=INTEGER}, #{loginName,jdbcType=VARCHAR},
		#{name,jdbcType=VARCHAR},
		#{password,jdbcType=VARCHAR},
		#{mobile,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR},
		#{sex,jdbcType=VARCHAR}, #{job,jdbcType=VARCHAR},
		#{num,jdbcType=VARCHAR}, #{userLock,jdbcType=INTEGER},
		#{userStatus,jdbcType=INTEGER}, #{administrator,jdbcType=INTEGER},
		#{lastModifyUserId,jdbcType=INTEGER},
		#{lastModifyUserEmail,jdbcType=VARCHAR},
		#{createUserId,jdbcType=INTEGER},
		#{createDatetime,jdbcType=TIMESTAMP},
		#{lastModifyDatetime,jdbcType=TIMESTAMP},
		#{lastLoginDatetime,jdbcType=TIMESTAMP}
		)
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
	</insert>
	<insert id="insertSelective" useGeneratedKeys="true" keyColumn="id" keyProperty="id" parameterType="net.beeway.emer.entry.YjUsers">
		insert into yj_users
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="id != null">
				id,
			</if>
			<if test="loginName != null">
				login_name,
			</if>
			<if test="name != null">
				name,
			</if>
			<if test="password != null">
				password,
			</if>
			<if test="mobile != null">
				mobile,
			</if>
			<if test="email != null">
				email,
			</if>
			<if test="sex != null">
				sex,
			</if>
			<if test="job != null">
				job,
			</if>
			<if test="num != null">
				num,
			</if>
			<if test="userLock != null">
				user_lock,
			</if>
			<if test="userStatus != null">
				user_status,
			</if>
			<if test="administrator != null">
				administrator,
			</if>
			<if test="lastModifyUserId != null">
				last_modify_user_id,
			</if>
			<if test="lastModifyUserEmail != null">
				last_modify_user_email,
			</if>
			<if test="createUserId != null">
				create_user_id,
			</if>
			<if test="createDatetime != null">
				create_datetime,
			</if>
			<if test="lastModifyDatetime != null">
				last_modify_datetime,
			</if>
			<if test="lastLoginDatetime != null">
				last_login_datetime,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="id != null">
				#{id,jdbcType=INTEGER},
			</if>
			<if test="loginName != null">
				#{loginName,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				#{name,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				#{password,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				#{mobile,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				#{email,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				#{sex,jdbcType=VARCHAR},
			</if>
			<if test="job != null">
				#{job,jdbcType=VARCHAR},
			</if>
			<if test="num != null">
				#{num,jdbcType=VARCHAR},
			</if>
			<if test="userLock != null">
				#{userLock,jdbcType=INTEGER},
			</if>
			<if test="userStatus != null">
				#{userStatus,jdbcType=INTEGER},
			</if>
			<if test="administrator != null">
				#{administrator,jdbcType=INTEGER},
			</if>
			<if test="lastModifyUserId != null">
				#{lastModifyUserId,jdbcType=INTEGER},
			</if>
			<if test="lastModifyUserEmail != null">
				#{lastModifyUserEmail,jdbcType=VARCHAR},
			</if>
			<if test="createUserId != null">
				#{createUserId,jdbcType=INTEGER},
			</if>
			<if test="createDatetime != null">
				#{createDatetime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastModifyDatetime != null">
				#{lastModifyDatetime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastLoginDatetime != null">
				#{lastLoginDatetime,jdbcType=TIMESTAMP},
			</if>
		</trim>
		<selectKey resultType="int" keyProperty="id" order="AFTER">
			SELECT
			LAST_INSERT_ID()
		</selectKey>
	</insert>
	<update id="updateByExampleSelective" parameterType="map">
		update yj_users
		<set>
			<if test="record.id != null">
				id = #{record.id,jdbcType=INTEGER},
			</if>
			<if test="record.loginName != null">
				login_name = #{record.loginName,jdbcType=VARCHAR},
			</if>
			<if test="record.name != null">
				name = #{record.name,jdbcType=VARCHAR},
			</if>
			<if test="record.password != null">
				password = #{record.password,jdbcType=VARCHAR},
			</if>
			<if test="record.mobile != null">
				mobile = #{record.mobile,jdbcType=VARCHAR},
			</if>
			<if test="record.email != null">
				email = #{record.email,jdbcType=VARCHAR},
			</if>
			<if test="record.sex != null">
				sex = #{record.sex,jdbcType=VARCHAR},
			</if>
			<if test="record.job != null">
				job = #{record.job,jdbcType=VARCHAR},
			</if>
			<if test="record.num != null">
				num = #{record.num,jdbcType=VARCHAR},
			</if>
			<if test="record.userLock != null">
				user_lock = #{record.userLock,jdbcType=INTEGER},
			</if>
			<if test="record.userStatus != null">
				user_status = #{record.userStatus,jdbcType=INTEGER},
			</if>
			<if test="record.administrator != null">
				administrator = #{record.administrator,jdbcType=INTEGER},
			</if>
			<if test="record.lastModifyUserId != null">
				last_modify_user_id =
				#{record.lastModifyUserId,jdbcType=INTEGER},
			</if>
			<if test="record.lastModifyUserEmail != null">
				last_modify_user_email =
				#{record.lastModifyUserEmail,jdbcType=VARCHAR},
			</if>
			<if test="record.createUserId != null">
				create_user_id = #{record.createUserId,jdbcType=INTEGER},
			</if>
			<if test="record.createDatetime != null">
				create_datetime =
				#{record.createDatetime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.lastModifyDatetime != null">
				last_modify_datetime =
				#{record.lastModifyDatetime,jdbcType=TIMESTAMP},
			</if>
			<if test="record.lastLoginDatetime != null">
				last_login_datetime =
				#{record.lastLoginDatetime,jdbcType=TIMESTAMP},
			</if>
		</set>
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByExample" parameterType="map">
		update yj_users
		set id = #{record.id,jdbcType=INTEGER},
		login_name =
		#{record.loginName,jdbcType=VARCHAR},
		name =
		#{record.name,jdbcType=VARCHAR},
		password =
		#{record.password,jdbcType=VARCHAR},
		mobile =
		#{record.mobile,jdbcType=VARCHAR},
		email =
		#{record.email,jdbcType=VARCHAR},
		sex = #{record.sex,jdbcType=VARCHAR},
		job = #{record.job,jdbcType=VARCHAR},
		num =
		#{record.num,jdbcType=VARCHAR},
		user_lock =
		#{record.userLock,jdbcType=INTEGER},
		user_status =
		#{record.userStatus,jdbcType=INTEGER},
		administrator =
		#{record.administrator,jdbcType=INTEGER},
		last_modify_user_id =
		#{record.lastModifyUserId,jdbcType=INTEGER},
		last_modify_user_email =
		#{record.lastModifyUserEmail,jdbcType=VARCHAR},
		create_user_id =
		#{record.createUserId,jdbcType=INTEGER},
		create_datetime =
		#{record.createDatetime,jdbcType=TIMESTAMP},
		last_modify_datetime =
		#{record.lastModifyDatetime,jdbcType=TIMESTAMP},
		last_login_datetime =
		#{record.lastLoginDatetime,jdbcType=TIMESTAMP}
		<if test="_parameter != null">
			<include refid="Update_By_Example_Where_Clause" />
		</if>
	</update>
	<update id="updateByPrimaryKeySelective" parameterType="net.beeway.emer.entry.YjUsers">
		update yj_users
		<set>
			<if test="loginName != null">
				login_name = #{loginName,jdbcType=VARCHAR},
			</if>
			<if test="name != null">
				name = #{name,jdbcType=VARCHAR},
			</if>
			<if test="password != null">
				password = #{password,jdbcType=VARCHAR},
			</if>
			<if test="mobile != null">
				mobile = #{mobile,jdbcType=VARCHAR},
			</if>
			<if test="email != null">
				email = #{email,jdbcType=VARCHAR},
			</if>
			<if test="sex != null">
				sex = #{sex,jdbcType=VARCHAR},
			</if>
			<if test="job != null">
				job = #{job,jdbcType=VARCHAR},
			</if>
			<if test="num != null">
				num = #{num,jdbcType=VARCHAR},
			</if>
			<if test="userLock != null">
				user_lock = #{userLock,jdbcType=INTEGER},
			</if>
			<if test="userStatus != null">
				user_status = #{userStatus,jdbcType=INTEGER},
			</if>
			<if test="administrator != null">
				administrator = #{administrator,jdbcType=INTEGER},
			</if>
			<if test="lastModifyUserId != null">
				last_modify_user_id =
				#{lastModifyUserId,jdbcType=INTEGER},
			</if>
			<if test="lastModifyUserEmail != null">
				last_modify_user_email =
				#{lastModifyUserEmail,jdbcType=VARCHAR},
			</if>
			<if test="createUserId != null">
				create_user_id = #{createUserId,jdbcType=INTEGER},
			</if>
			<if test="createDatetime != null">
				create_datetime = #{createDatetime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastModifyDatetime != null">
				last_modify_datetime =
				#{lastModifyDatetime,jdbcType=TIMESTAMP},
			</if>
			<if test="lastLoginDatetime != null">
				last_login_datetime =
				#{lastLoginDatetime,jdbcType=TIMESTAMP},
			</if>
		</set>
		where id = #{id,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="net.beeway.emer.entry.YjUsers">
		update yj_users
		set login_name = #{loginName,jdbcType=VARCHAR},
		name =
		#{name,jdbcType=VARCHAR},
		password = #{password,jdbcType=VARCHAR},
		mobile = #{mobile,jdbcType=VARCHAR},
		email = #{email,jdbcType=VARCHAR},
		sex = #{sex,jdbcType=VARCHAR},
		job = #{job,jdbcType=VARCHAR},
		num =
		#{num,jdbcType=VARCHAR},
		user_lock =
		#{userLock,jdbcType=INTEGER},
		user_status = #{userStatus,jdbcType=INTEGER},
		administrator =
		#{administrator,jdbcType=INTEGER},
		last_modify_user_id =
		#{lastModifyUserId,jdbcType=INTEGER},
		last_modify_user_email =
		#{lastModifyUserEmail,jdbcType=VARCHAR},
		create_user_id =
		#{createUserId,jdbcType=INTEGER},
		create_datetime =
		#{createDatetime,jdbcType=TIMESTAMP},
		last_modify_datetime =
		#{lastModifyDatetime,jdbcType=TIMESTAMP},
		last_login_datetime =
		#{lastLoginDatetime,jdbcType=TIMESTAMP}
		where id =
		#{id,jdbcType=INTEGER}
	</update>

	<!-- 自定义 -->


	<select id="getUsersByLoginName" parameterType="String" resultMap="BaseResultMap">
		select * from yj_users where login_name = #{loginName} limit
		0,1
	</select>
	<select id="getUsersByEmail" parameterType="String" resultMap="BaseResultMap">
		select * from yj_users where email = #{email} limit 0,1
	</select>

	<select id="getUsersByRoleId" parameterType="int" resultMap="BaseResultMap">
		select u.* from yj_user_role ur
		inner join yj_users u on u.id =
		ur.user_id
		where ur.role_id = #{roleId} ORDER BY
		ur.last_modify_datetime DESC
	</select>

	<select id="getUserByEmailAndRoleId" parameterType="java.util.Map" resultMap="BaseResultMap">
		select u.* from yj_users u where u.email like
		CONCAT(#{email},'%') and
		not exists(select ur.id from yj_user_role ur
		where ur.role_id = #{roleId}
		and ur.user_id = u.id)
	</select>

	<update id="updateUserLoginDate" parameterType="net.beeway.emer.entry.YjUsers">
		update yj_users
		set last_login_datetime = #{lastLoginDatetime} where id = #{id}
	</update>


	<update id="lockingUser" parameterType="net.beeway.emer.entry.YjUsers">
		update yj_users set
		user_lock = #{userLock},last_modify_user_id =
		#{lastModifyUserId},last_modify_user_email =
		#{lastModifyUserEmail},last_modify_datetime = #{lastModifyDatetime}
		where id = #{id}
	</update>
	<update id="updatePwd">
	    update yj_users set
			password = #{password,jdbcType=VARCHAR}
		where id = #{id}
	</update>
	<select id="checkUserEmailUnique" parameterType="net.beeway.emer.entry.YjUsers" resultType="int">
		select count(id) from yj_users
		<trim prefix="where" prefixOverrides="and | or">
			<if test="id != null">id != #{id} AND </if>
			<if test="email != null and email != ''"> email = #{email} </if>
		</trim>
	</select>

	<select id="checkUserNumUnique" parameterType="net.beeway.emer.entry.YjUsers" resultType="int">
		select count(id) from yj_users
		<trim prefix="where" prefixOverrides="and | or">
			<if test="id != null">id != #{id} AND </if>
			<if test="num != null and num != ''"> num = #{num} </if>
		</trim>
	</select>

	<select id="checkUserMobileUnique" parameterType="net.beeway.emer.entry.YjUsers" resultType="int">
		select count(id) from yj_users
		<trim prefix="where" prefixOverrides="and | or">
			<if test="id != null">id != #{id} AND </if>
			<if test="mobile != null and mobile != ''"> mobile = #{mobile} </if>
		</trim>
	</select>

	<update id="updateUserByNum" parameterType="net.beeway.emer.entry.YjUsers">
		UPDATE yj_users set
		flowerName = #{flowerName},sex = #{sex} where num =
		#{num}
	</update>

	<select id="countProxyNum" resultType="map">
		select u.create_user_id as
		userId,count(id) as amount from yj_users u where
		u.channel_type = 2
		group by u.create_user_id
	</select>

	<select id="countExpandAmount" resultType="net.beeway.emer.entry.YjUsers">
		select
		u.create_user_id AS id,
		sum(recharge_amount) AS rechargeAmount,
		sum(consumption_amount) AS consumptionAmount,
		sum(receivable_amount) AS
		receivableAmount
		from yj_users u where u.channel_type = 2 GROUP BY
		u.create_user_id
	</select>

	<select id="getEverydayStandDetail" resultType="net.beeway.emer.entry.YjUsers">
		select
		(
		select
		sum(e.receivable_amount)
		from
		user_recharge_examine e
		where
		e.examine_time between #{startDate} and #{endDate}
		and e.recharge_id in
		(
		select id from user_recharge r
		<where>
			<if test="channelType != null and channelType == 0">
				and r.proxy_user in (
				select
				id
				from
				yj_users
				where
				user_status = 1
				and channel_type = 2
				)
			</if>
			<if test="channelType != null and channelType == 1">
				and r.proxy_user in (
				select
				id
				from
				yj_users
				where
				user_status = 1
				and channel_type = 2
				and create_user_id =
				#{loginUserId}
				)
			</if>
			<if test="channelType != null and channelType == 2">
				and r.proxy_user = #{loginUserId}
			</if>
		</where>
		)
		) as receivableAmount,
		(
		select
		sum(amount)
		from
		user_recharge r
		where
		(
		(r.examine_state in (-1,1,2) and r.status = 0)
		or (r.examine_state = 3
		and r.status = 1)
		)
		<if test="channelType != null and channelType == 0">
			and r.proxy_user in (
			select
			id
			from
			yj_users
			where
			user_status
			= 1
			and channel_type = 2
			)
		</if>
		<if test="channelType != null and channelType == 1">
			and r.proxy_user in (
			select
			id
			from
			yj_users
			where
			user_status
			= 1
			and channel_type = 2
			and create_user_id = #{loginUserId}
			)
		</if>
		<if test="channelType != null and channelType == 2">
			and r.proxy_user = #{loginUserId}
		</if>
		and r.create_time
		between #{startDate} and #{endDate}
		) as
		rechargeAmount,
		(
		select
		sum(c.price)
		from coupon c
		inner join yj_users u
		on u.id = c.create_user and u.channel_type = 2
		where
		c.status != -1
		and
		c.create_time between #{startDate} and #{endDate}
		<if test="channelType != null and channelType == 1">
			and u.create_user_id = #{loginUserId}
		</if>
		<if test="channelType != null and channelType == 2">
			and u.id = #{loginUserId}
		</if>
		) as consumptionAmount,
		(
		select sum(surplus_amount)
		FROM
		yj_users u
		where
		u.user_status = 1
		and u.channel_type = 2
		<if test="channelType != null and channelType == 1">
			and u.create_user_id = #{loginUserId}
		</if>
		<if test="channelType != null and channelType == 2">
			and u.id = #{loginUserId}
		</if>
		) as surplusAmount
		from dual
	</select>
</mapper>